// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testJobs(t *testing.T) {
	t.Parallel()

	query := Jobs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testJobsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = job.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJobsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Jobs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testJobsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := JobSlice{job}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testJobsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := JobExists(tx, job.ID)
	if err != nil {
		t.Errorf("Unable to check if Job exists: %s", err)
	}
	if !e {
		t.Errorf("Expected JobExistsG to return true, but got false.")
	}
}
func testJobsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	jobFound, err := FindJob(tx, job.ID)
	if err != nil {
		t.Error(err)
	}

	if jobFound == nil {
		t.Error("want a record, got nil")
	}
}
func testJobsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Jobs(tx).Bind(job); err != nil {
		t.Error(err)
	}
}

func testJobsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Jobs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testJobsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	jobOne := &Job{}
	jobTwo := &Job{}
	if err = randomize.Struct(seed, jobOne, jobDBTypes, false, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}
	if err = randomize.Struct(seed, jobTwo, jobDBTypes, false, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jobOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = jobTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Jobs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testJobsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	jobOne := &Job{}
	jobTwo := &Job{}
	if err = randomize.Struct(seed, jobOne, jobDBTypes, false, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}
	if err = randomize.Struct(seed, jobTwo, jobDBTypes, false, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = jobOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = jobTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func jobBeforeInsertHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterInsertHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterSelectHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobBeforeUpdateHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterUpdateHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobBeforeDeleteHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterDeleteHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobBeforeUpsertHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func jobAfterUpsertHook(e boil.Executor, o *Job) error {
	*o = Job{}
	return nil
}

func testJobsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Job{}
	o := &Job{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, jobDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Job object: %s", err)
	}

	AddJobHook(boil.BeforeInsertHook, jobBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	jobBeforeInsertHooks = []JobHook{}

	AddJobHook(boil.AfterInsertHook, jobAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	jobAfterInsertHooks = []JobHook{}

	AddJobHook(boil.AfterSelectHook, jobAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	jobAfterSelectHooks = []JobHook{}

	AddJobHook(boil.BeforeUpdateHook, jobBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	jobBeforeUpdateHooks = []JobHook{}

	AddJobHook(boil.AfterUpdateHook, jobAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	jobAfterUpdateHooks = []JobHook{}

	AddJobHook(boil.BeforeDeleteHook, jobBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	jobBeforeDeleteHooks = []JobHook{}

	AddJobHook(boil.AfterDeleteHook, jobAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	jobAfterDeleteHooks = []JobHook{}

	AddJobHook(boil.BeforeUpsertHook, jobBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	jobBeforeUpsertHooks = []JobHook{}

	AddJobHook(boil.AfterUpsertHook, jobAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	jobAfterUpsertHooks = []JobHook{}
}
func testJobsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJobsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx, jobColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testJobsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = job.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testJobsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := JobSlice{job}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testJobsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Jobs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	jobDBTypes = map[string]string{`CreatedAt`: `timestamp`, `DRCCheckTime`: `timestamp`, `Env`: `varchar`, `ID`: `bigint`, `InventoryID`: `bigint`, `PlaybookID`: `bigint`, `Status`: `enum('running','successful','failed')`, `UUID`: `varchar`, `UpdatedAt`: `timestamp`}
	_          = bytes.MinRead
)

func testJobsUpdate(t *testing.T) {
	t.Parallel()

	if len(jobColumns) == len(jobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	if err = job.Update(tx); err != nil {
		t.Error(err)
	}
}

func testJobsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(jobColumns) == len(jobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	job := &Job{}
	if err = randomize.Struct(seed, job, jobDBTypes, true, jobColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, job, jobDBTypes, true, jobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(jobColumns, jobPrimaryKeyColumns) {
		fields = jobColumns
	} else {
		fields = strmangle.SetComplement(
			jobColumns,
			jobPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(job))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := JobSlice{job}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testJobsUpsert(t *testing.T) {
	t.Parallel()

	if len(jobColumns) == len(jobPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	job := Job{}
	if err = randomize.Struct(seed, &job, jobDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = job.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Job: %s", err)
	}

	count, err := Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &job, jobDBTypes, false, jobPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Job struct: %s", err)
	}

	if err = job.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Job: %s", err)
	}

	count, err = Jobs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
