// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testRuns(t *testing.T) {
	t.Parallel()

	query := Runs(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testRunsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = run.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRunsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Runs(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRunsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RunSlice{run}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testRunsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := RunExists(tx, run.ID)
	if err != nil {
		t.Errorf("Unable to check if Run exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RunExistsG to return true, but got false.")
	}
}
func testRunsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	runFound, err := FindRun(tx, run.ID)
	if err != nil {
		t.Error(err)
	}

	if runFound == nil {
		t.Error("want a record, got nil")
	}
}
func testRunsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Runs(tx).Bind(run); err != nil {
		t.Error(err)
	}
}

func testRunsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Runs(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRunsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	runOne := &Run{}
	runTwo := &Run{}
	if err = randomize.Struct(seed, runOne, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}
	if err = randomize.Struct(seed, runTwo, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = runOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = runTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Runs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRunsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	runOne := &Run{}
	runTwo := &Run{}
	if err = randomize.Struct(seed, runOne, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}
	if err = randomize.Struct(seed, runTwo, runDBTypes, false, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = runOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = runTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func runBeforeInsertHook(e boil.Executor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterInsertHook(e boil.Executor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterSelectHook(e boil.Executor, o *Run) error {
	*o = Run{}
	return nil
}

func runBeforeUpdateHook(e boil.Executor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterUpdateHook(e boil.Executor, o *Run) error {
	*o = Run{}
	return nil
}

func runBeforeDeleteHook(e boil.Executor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterDeleteHook(e boil.Executor, o *Run) error {
	*o = Run{}
	return nil
}

func runBeforeUpsertHook(e boil.Executor, o *Run) error {
	*o = Run{}
	return nil
}

func runAfterUpsertHook(e boil.Executor, o *Run) error {
	*o = Run{}
	return nil
}

func testRunsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Run{}
	o := &Run{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, runDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Run object: %s", err)
	}

	AddRunHook(boil.BeforeInsertHook, runBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	runBeforeInsertHooks = []RunHook{}

	AddRunHook(boil.AfterInsertHook, runAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	runAfterInsertHooks = []RunHook{}

	AddRunHook(boil.AfterSelectHook, runAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	runAfterSelectHooks = []RunHook{}

	AddRunHook(boil.BeforeUpdateHook, runBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	runBeforeUpdateHooks = []RunHook{}

	AddRunHook(boil.AfterUpdateHook, runAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	runAfterUpdateHooks = []RunHook{}

	AddRunHook(boil.BeforeDeleteHook, runBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	runBeforeDeleteHooks = []RunHook{}

	AddRunHook(boil.AfterDeleteHook, runAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	runAfterDeleteHooks = []RunHook{}

	AddRunHook(boil.BeforeUpsertHook, runBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	runBeforeUpsertHooks = []RunHook{}

	AddRunHook(boil.AfterUpsertHook, runAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	runAfterUpsertHooks = []RunHook{}
}
func testRunsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRunsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx, runColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRunsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = run.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRunsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := RunSlice{run}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testRunsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Runs(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	runDBTypes = map[string]string{`CreatedAt`: `timestamp`, `DRCCheckTime`: `timestamp`, `Env`: `varchar`, `Hosts`: `mediumtext`, `ID`: `bigint`, `JobID`: `varchar`, `Limit`: `mediumtext`, `UUID`: `varchar`, `UpdatedAt`: `timestamp`, `Vars`: `mediumtext`}
	_          = bytes.MinRead
)

func testRunsUpdate(t *testing.T) {
	t.Parallel()

	if len(runColumns) == len(runPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	if err = run.Update(tx); err != nil {
		t.Error(err)
	}
}

func testRunsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(runColumns) == len(runPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	run := &Run{}
	if err = randomize.Struct(seed, run, runDBTypes, true, runColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, run, runDBTypes, true, runPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(runColumns, runPrimaryKeyColumns) {
		fields = runColumns
	} else {
		fields = strmangle.SetComplement(
			runColumns,
			runPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(run))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := RunSlice{run}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testRunsUpsert(t *testing.T) {
	t.Parallel()

	if len(runColumns) == len(runPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	run := Run{}
	if err = randomize.Struct(seed, &run, runDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = run.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Run: %s", err)
	}

	count, err := Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &run, runDBTypes, false, runPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Run struct: %s", err)
	}

	if err = run.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Run: %s", err)
	}

	count, err = Runs(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
