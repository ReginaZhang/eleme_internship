// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testInventories(t *testing.T) {
	t.Parallel()

	query := Inventories(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testInventoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = inventory.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInventoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Inventories(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInventoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InventorySlice{inventory}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testInventoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := InventoryExists(tx, inventory.ID)
	if err != nil {
		t.Errorf("Unable to check if Inventory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InventoryExistsG to return true, but got false.")
	}
}
func testInventoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	inventoryFound, err := FindInventory(tx, inventory.ID)
	if err != nil {
		t.Error(err)
	}

	if inventoryFound == nil {
		t.Error("want a record, got nil")
	}
}
func testInventoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Inventories(tx).Bind(inventory); err != nil {
		t.Error(err)
	}
}

func testInventoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Inventories(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInventoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventoryOne := &Inventory{}
	inventoryTwo := &Inventory{}
	if err = randomize.Struct(seed, inventoryOne, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}
	if err = randomize.Struct(seed, inventoryTwo, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = inventoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Inventories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInventoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	inventoryOne := &Inventory{}
	inventoryTwo := &Inventory{}
	if err = randomize.Struct(seed, inventoryOne, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}
	if err = randomize.Struct(seed, inventoryTwo, inventoryDBTypes, false, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventoryOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = inventoryTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func inventoryBeforeInsertHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterInsertHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterSelectHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryBeforeUpdateHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterUpdateHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryBeforeDeleteHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterDeleteHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryBeforeUpsertHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func inventoryAfterUpsertHook(e boil.Executor, o *Inventory) error {
	*o = Inventory{}
	return nil
}

func testInventoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Inventory{}
	o := &Inventory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, inventoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Inventory object: %s", err)
	}

	AddInventoryHook(boil.BeforeInsertHook, inventoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	inventoryBeforeInsertHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterInsertHook, inventoryAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	inventoryAfterInsertHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterSelectHook, inventoryAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	inventoryAfterSelectHooks = []InventoryHook{}

	AddInventoryHook(boil.BeforeUpdateHook, inventoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	inventoryBeforeUpdateHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterUpdateHook, inventoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	inventoryAfterUpdateHooks = []InventoryHook{}

	AddInventoryHook(boil.BeforeDeleteHook, inventoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	inventoryBeforeDeleteHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterDeleteHook, inventoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	inventoryAfterDeleteHooks = []InventoryHook{}

	AddInventoryHook(boil.BeforeUpsertHook, inventoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	inventoryBeforeUpsertHooks = []InventoryHook{}

	AddInventoryHook(boil.AfterUpsertHook, inventoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	inventoryAfterUpsertHooks = []InventoryHook{}
}
func testInventoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInventoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx, inventoryColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInventoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = inventory.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testInventoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := InventorySlice{inventory}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testInventoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Inventories(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	inventoryDBTypes = map[string]string{`CreatedAt`: `timestamp`, `DRCCheckTime`: `timestamp`, `Env`: `varchar`, `Hosts`: `mediumtext`, `ID`: `bigint`, `Name`: `varchar`, `UpdatedAt`: `timestamp`, `Vars`: `mediumtext`, `Version`: `varchar`}
	_                = bytes.MinRead
)

func testInventoriesUpdate(t *testing.T) {
	t.Parallel()

	if len(inventoryColumns) == len(inventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	if err = inventory.Update(tx); err != nil {
		t.Error(err)
	}
}

func testInventoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(inventoryColumns) == len(inventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	inventory := &Inventory{}
	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, inventory, inventoryDBTypes, true, inventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(inventoryColumns, inventoryPrimaryKeyColumns) {
		fields = inventoryColumns
	} else {
		fields = strmangle.SetComplement(
			inventoryColumns,
			inventoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(inventory))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := InventorySlice{inventory}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testInventoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(inventoryColumns) == len(inventoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	inventory := Inventory{}
	if err = randomize.Struct(seed, &inventory, inventoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = inventory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Inventory: %s", err)
	}

	count, err := Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &inventory, inventoryDBTypes, false, inventoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Inventory struct: %s", err)
	}

	if err = inventory.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Inventory: %s", err)
	}

	count, err = Inventories(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
