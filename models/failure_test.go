// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testFailures(t *testing.T) {
	t.Parallel()

	query := Failures(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testFailuresDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = failure.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFailuresQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Failures(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFailuresSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FailureSlice{failure}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testFailuresExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := FailureExists(tx, failure.ID)
	if err != nil {
		t.Errorf("Unable to check if Failure exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FailureExistsG to return true, but got false.")
	}
}
func testFailuresFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	failureFound, err := FindFailure(tx, failure.ID)
	if err != nil {
		t.Error(err)
	}

	if failureFound == nil {
		t.Error("want a record, got nil")
	}
}
func testFailuresBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Failures(tx).Bind(failure); err != nil {
		t.Error(err)
	}
}

func testFailuresOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Failures(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFailuresAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failureOne := &Failure{}
	failureTwo := &Failure{}
	if err = randomize.Struct(seed, failureOne, failureDBTypes, false, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}
	if err = randomize.Struct(seed, failureTwo, failureDBTypes, false, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failureOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = failureTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Failures(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFailuresCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	failureOne := &Failure{}
	failureTwo := &Failure{}
	if err = randomize.Struct(seed, failureOne, failureDBTypes, false, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}
	if err = randomize.Struct(seed, failureTwo, failureDBTypes, false, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failureOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = failureTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func failureBeforeInsertHook(e boil.Executor, o *Failure) error {
	*o = Failure{}
	return nil
}

func failureAfterInsertHook(e boil.Executor, o *Failure) error {
	*o = Failure{}
	return nil
}

func failureAfterSelectHook(e boil.Executor, o *Failure) error {
	*o = Failure{}
	return nil
}

func failureBeforeUpdateHook(e boil.Executor, o *Failure) error {
	*o = Failure{}
	return nil
}

func failureAfterUpdateHook(e boil.Executor, o *Failure) error {
	*o = Failure{}
	return nil
}

func failureBeforeDeleteHook(e boil.Executor, o *Failure) error {
	*o = Failure{}
	return nil
}

func failureAfterDeleteHook(e boil.Executor, o *Failure) error {
	*o = Failure{}
	return nil
}

func failureBeforeUpsertHook(e boil.Executor, o *Failure) error {
	*o = Failure{}
	return nil
}

func failureAfterUpsertHook(e boil.Executor, o *Failure) error {
	*o = Failure{}
	return nil
}

func testFailuresHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Failure{}
	o := &Failure{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, failureDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Failure object: %s", err)
	}

	AddFailureHook(boil.BeforeInsertHook, failureBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	failureBeforeInsertHooks = []FailureHook{}

	AddFailureHook(boil.AfterInsertHook, failureAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	failureAfterInsertHooks = []FailureHook{}

	AddFailureHook(boil.AfterSelectHook, failureAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	failureAfterSelectHooks = []FailureHook{}

	AddFailureHook(boil.BeforeUpdateHook, failureBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	failureBeforeUpdateHooks = []FailureHook{}

	AddFailureHook(boil.AfterUpdateHook, failureAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	failureAfterUpdateHooks = []FailureHook{}

	AddFailureHook(boil.BeforeDeleteHook, failureBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	failureBeforeDeleteHooks = []FailureHook{}

	AddFailureHook(boil.AfterDeleteHook, failureAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	failureAfterDeleteHooks = []FailureHook{}

	AddFailureHook(boil.BeforeUpsertHook, failureBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	failureBeforeUpsertHooks = []FailureHook{}

	AddFailureHook(boil.AfterUpsertHook, failureAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	failureAfterUpsertHooks = []FailureHook{}
}
func testFailuresInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFailuresInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx, failureColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFailuresReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = failure.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testFailuresReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := FailureSlice{failure}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testFailuresSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Failures(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	failureDBTypes = map[string]string{`CreatedAt`: `timestamp`, `DRCCheckTime`: `timestamp`, `ID`: `bigint`, `Result`: `mediumtext`, `StatsID`: `bigint`, `UpdatedAt`: `timestamp`}
	_              = bytes.MinRead
)

func testFailuresUpdate(t *testing.T) {
	t.Parallel()

	if len(failureColumns) == len(failurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	if err = failure.Update(tx); err != nil {
		t.Error(err)
	}
}

func testFailuresSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(failureColumns) == len(failurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	failure := &Failure{}
	if err = randomize.Struct(seed, failure, failureDBTypes, true, failureColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, failure, failureDBTypes, true, failurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(failureColumns, failurePrimaryKeyColumns) {
		fields = failureColumns
	} else {
		fields = strmangle.SetComplement(
			failureColumns,
			failurePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(failure))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := FailureSlice{failure}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testFailuresUpsert(t *testing.T) {
	t.Parallel()

	if len(failureColumns) == len(failurePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	failure := Failure{}
	if err = randomize.Struct(seed, &failure, failureDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = failure.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Failure: %s", err)
	}

	count, err := Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &failure, failureDBTypes, false, failurePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Failure struct: %s", err)
	}

	if err = failure.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Failure: %s", err)
	}

	count, err = Failures(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
