// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

func testStatistics(t *testing.T) {
	t.Parallel()

	query := Statistics(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}
func testStatisticsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = statistic.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatisticsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Statistics(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testStatisticsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := StatisticSlice{statistic}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}
func testStatisticsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := StatisticExists(tx, statistic.ID)
	if err != nil {
		t.Errorf("Unable to check if Statistic exists: %s", err)
	}
	if !e {
		t.Errorf("Expected StatisticExistsG to return true, but got false.")
	}
}
func testStatisticsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	statisticFound, err := FindStatistic(tx, statistic.ID)
	if err != nil {
		t.Error(err)
	}

	if statisticFound == nil {
		t.Error("want a record, got nil")
	}
}
func testStatisticsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Statistics(tx).Bind(statistic); err != nil {
		t.Error(err)
	}
}

func testStatisticsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Statistics(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testStatisticsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statisticOne := &Statistic{}
	statisticTwo := &Statistic{}
	if err = randomize.Struct(seed, statisticOne, statisticDBTypes, false, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}
	if err = randomize.Struct(seed, statisticTwo, statisticDBTypes, false, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statisticOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = statisticTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Statistics(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testStatisticsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	statisticOne := &Statistic{}
	statisticTwo := &Statistic{}
	if err = randomize.Struct(seed, statisticOne, statisticDBTypes, false, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}
	if err = randomize.Struct(seed, statisticTwo, statisticDBTypes, false, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statisticOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = statisticTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}
func statisticBeforeInsertHook(e boil.Executor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterInsertHook(e boil.Executor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterSelectHook(e boil.Executor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticBeforeUpdateHook(e boil.Executor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterUpdateHook(e boil.Executor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticBeforeDeleteHook(e boil.Executor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterDeleteHook(e boil.Executor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticBeforeUpsertHook(e boil.Executor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func statisticAfterUpsertHook(e boil.Executor, o *Statistic) error {
	*o = Statistic{}
	return nil
}

func testStatisticsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Statistic{}
	o := &Statistic{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, statisticDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Statistic object: %s", err)
	}

	AddStatisticHook(boil.BeforeInsertHook, statisticBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	statisticBeforeInsertHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterInsertHook, statisticAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	statisticAfterInsertHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterSelectHook, statisticAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	statisticAfterSelectHooks = []StatisticHook{}

	AddStatisticHook(boil.BeforeUpdateHook, statisticBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	statisticBeforeUpdateHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterUpdateHook, statisticAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	statisticAfterUpdateHooks = []StatisticHook{}

	AddStatisticHook(boil.BeforeDeleteHook, statisticBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	statisticBeforeDeleteHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterDeleteHook, statisticAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	statisticAfterDeleteHooks = []StatisticHook{}

	AddStatisticHook(boil.BeforeUpsertHook, statisticBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	statisticBeforeUpsertHooks = []StatisticHook{}

	AddStatisticHook(boil.AfterUpsertHook, statisticAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	statisticAfterUpsertHooks = []StatisticHook{}
}
func testStatisticsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStatisticsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx, statisticColumnsWithoutDefault...); err != nil {
		t.Error(err)
	}

	count, err := Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testStatisticsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = statistic.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testStatisticsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := StatisticSlice{statistic}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}
func testStatisticsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Statistics(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	statisticDBTypes = map[string]string{`CreatedAt`: `timestamp`, `DRCCheckTime`: `timestamp`, `Failed`: `int`, `ID`: `bigint`, `JobStartTime`: `timestamp`, `RunID`: `varchar`, `Target`: `varchar`, `Unreachable`: `tinyint`, `UpdatedAt`: `timestamp`}
	_                = bytes.MinRead
)

func testStatisticsUpdate(t *testing.T) {
	t.Parallel()

	if len(statisticColumns) == len(statisticPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	if err = statistic.Update(tx); err != nil {
		t.Error(err)
	}
}

func testStatisticsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(statisticColumns) == len(statisticPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	statistic := &Statistic{}
	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, statistic, statisticDBTypes, true, statisticPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(statisticColumns, statisticPrimaryKeyColumns) {
		fields = statisticColumns
	} else {
		fields = strmangle.SetComplement(
			statisticColumns,
			statisticPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(statistic))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := StatisticSlice{statistic}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}
func testStatisticsUpsert(t *testing.T) {
	t.Parallel()

	if len(statisticColumns) == len(statisticPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	statistic := Statistic{}
	if err = randomize.Struct(seed, &statistic, statisticDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = statistic.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Statistic: %s", err)
	}

	count, err := Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &statistic, statisticDBTypes, false, statisticPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Statistic struct: %s", err)
	}

	if err = statistic.Upsert(tx, nil); err != nil {
		t.Errorf("Unable to upsert Statistic: %s", err)
	}

	count, err = Statistics(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
