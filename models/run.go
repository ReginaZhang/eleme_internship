// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"database/sql"
	"fmt"
	"reflect"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Run is an object representing the database table.
type Run struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DRCCheckTime time.Time `boil:"drc_check_time" json:"drc_check_time" toml:"drc_check_time" yaml:"drc_check_time"`
	UUID         string    `boil:"uuid" json:"uuid" toml:"uuid" yaml:"uuid"`
	JobID        string    `boil:"job_id" json:"job_id" toml:"job_id" yaml:"job_id"`
	Env          string    `boil:"env" json:"env" toml:"env" yaml:"env"`
	Hosts        string    `boil:"hosts" json:"hosts" toml:"hosts" yaml:"hosts"`
	Vars         string    `boil:"vars" json:"vars" toml:"vars" yaml:"vars"`
	Limit        string    `boil:"limit" json:"limit" toml:"limit" yaml:"limit"`

	R *runR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L runL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RunColumns = struct {
	ID           string
	CreatedAt    string
	UpdatedAt    string
	DRCCheckTime string
	UUID         string
	JobID        string
	Env          string
	Hosts        string
	Vars         string
	Limit        string
}{
	ID:           "id",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
	DRCCheckTime: "drc_check_time",
	UUID:         "uuid",
	JobID:        "job_id",
	Env:          "env",
	Hosts:        "hosts",
	Vars:         "vars",
	Limit:        "limit",
}

// runR is where relationships are stored.
type runR struct {
}

// runL is where Load methods for each relationship are stored.
type runL struct{}

var (
	runColumns               = []string{"id", "created_at", "updated_at", "drc_check_time", "uuid", "job_id", "env", "hosts", "vars", "limit"}
	runColumnsWithoutDefault = []string{"uuid", "job_id", "env", "hosts", "vars", "limit"}
	runColumnsWithDefault    = []string{"id", "created_at", "updated_at", "drc_check_time"}
	runPrimaryKeyColumns     = []string{"id"}
)

type (
	// RunSlice is an alias for a slice of pointers to Run.
	// This should generally be used opposed to []Run.
	RunSlice []*Run
	// RunHook is the signature for custom Run hook methods
	RunHook func(boil.Executor, *Run) error

	runQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	runType                 = reflect.TypeOf(&Run{})
	runMapping              = queries.MakeStructMapping(runType)
	runPrimaryKeyMapping, _ = queries.BindMapping(runType, runMapping, runPrimaryKeyColumns)
	runInsertCacheMut       sync.RWMutex
	runInsertCache          = make(map[string]insertCache)
	runUpdateCacheMut       sync.RWMutex
	runUpdateCache          = make(map[string]updateCache)
	runUpsertCacheMut       sync.RWMutex
	runUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var runBeforeInsertHooks []RunHook
var runBeforeUpdateHooks []RunHook
var runBeforeDeleteHooks []RunHook
var runBeforeUpsertHooks []RunHook

var runAfterInsertHooks []RunHook
var runAfterSelectHooks []RunHook
var runAfterUpdateHooks []RunHook
var runAfterDeleteHooks []RunHook
var runAfterUpsertHooks []RunHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Run) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range runBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Run) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range runBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Run) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range runBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Run) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range runBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Run) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range runAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Run) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range runAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Run) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range runAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Run) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range runAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Run) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range runAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRunHook registers your hook function for all future operations.
func AddRunHook(hookPoint boil.HookPoint, runHook RunHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		runBeforeInsertHooks = append(runBeforeInsertHooks, runHook)
	case boil.BeforeUpdateHook:
		runBeforeUpdateHooks = append(runBeforeUpdateHooks, runHook)
	case boil.BeforeDeleteHook:
		runBeforeDeleteHooks = append(runBeforeDeleteHooks, runHook)
	case boil.BeforeUpsertHook:
		runBeforeUpsertHooks = append(runBeforeUpsertHooks, runHook)
	case boil.AfterInsertHook:
		runAfterInsertHooks = append(runAfterInsertHooks, runHook)
	case boil.AfterSelectHook:
		runAfterSelectHooks = append(runAfterSelectHooks, runHook)
	case boil.AfterUpdateHook:
		runAfterUpdateHooks = append(runAfterUpdateHooks, runHook)
	case boil.AfterDeleteHook:
		runAfterDeleteHooks = append(runAfterDeleteHooks, runHook)
	case boil.AfterUpsertHook:
		runAfterUpsertHooks = append(runAfterUpsertHooks, runHook)
	}
}

// OneP returns a single run record from the query, and panics on error.
func (q runQuery) OneP() *Run {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single run record from the query.
func (q runQuery) One() (*Run, error) {
	o := &Run{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for run")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Run records from the query, and panics on error.
func (q runQuery) AllP() RunSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Run records from the query.
func (q runQuery) All() (RunSlice, error) {
	var o []*Run

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Run slice")
	}

	if len(runAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Run records in the query, and panics on error.
func (q runQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Run records in the query.
func (q runQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count run rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q runQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q runQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if run exists")
	}

	return count > 0, nil
}

// RunsG retrieves all records.
func RunsG(mods ...qm.QueryMod) runQuery {
	return Runs(boil.GetDB(), mods...)
}

// Runs retrieves all the records using an executor.
func Runs(exec boil.Executor, mods ...qm.QueryMod) runQuery {
	mods = append(mods, qm.From("`run`"))
	return runQuery{NewQuery(exec, mods...)}
}

// FindRunG retrieves a single record by ID.
func FindRunG(id int64, selectCols ...string) (*Run, error) {
	return FindRun(boil.GetDB(), id, selectCols...)
}

// FindRunGP retrieves a single record by ID, and panics on error.
func FindRunGP(id int64, selectCols ...string) *Run {
	retobj, err := FindRun(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindRun retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRun(exec boil.Executor, id int64, selectCols ...string) (*Run, error) {
	runObj := &Run{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `run` where `id`=?", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(runObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from run")
	}

	return runObj, nil
}

// FindRunP retrieves a single record by ID with an executor, and panics on error.
func FindRunP(exec boil.Executor, id int64, selectCols ...string) *Run {
	retobj, err := FindRun(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Run) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Run) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Run) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Run) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no run provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(runColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	runInsertCacheMut.RLock()
	cache, cached := runInsertCache[key]
	runInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			runColumns,
			runColumnsWithDefault,
			runColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(runType, runMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(runType, runMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `run` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `run` () VALUES ()"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `run` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, runPrimaryKeyColumns))
		}

		if len(wl) != 0 {
			cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into run")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == runMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for run")
	}

CacheNoHooks:
	if !cached {
		runInsertCacheMut.Lock()
		runInsertCache[key] = cache
		runInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Run record. See Update for
// whitelist behavior description.
func (o *Run) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Run record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Run) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Run, and panics on error.
// See Update for whitelist behavior description.
func (o *Run) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Run.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Run) Update(exec boil.Executor, whitelist ...string) error {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	runUpdateCacheMut.RLock()
	cache, cached := runUpdateCache[key]
	runUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(
			runColumns,
			runPrimaryKeyColumns,
			whitelist,
		)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update run, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `run` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, runPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(runType, runMapping, append(wl, runPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update run row")
	}

	if !cached {
		runUpdateCacheMut.Lock()
		runUpdateCache[key] = cache
		runUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q runQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q runQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for run")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RunSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o RunSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o RunSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RunSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), runPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `run` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, runPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in run slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Run) UpsertG(updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Run) UpsertGP(updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Run) UpsertP(exec boil.Executor, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Run) Upsert(exec boil.Executor, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no run provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(runColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	runUpsertCacheMut.RLock()
	cache, cached := runUpsertCache[key]
	runUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := strmangle.InsertColumnSet(
			runColumns,
			runColumnsWithDefault,
			runColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		update := strmangle.UpdateColumnSet(
			runColumns,
			runPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("models: unable to upsert run, could not build update column list")
		}

		cache.query = queries.BuildUpsertQueryMySQL(dialect, "run", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `run` WHERE `id`=?",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
		)

		cache.valueMapping, err = queries.BindMapping(runType, runMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(runType, runMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for run")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == runMapping["ID"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}

	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for run")
	}

CacheNoHooks:
	if !cached {
		runUpsertCacheMut.Lock()
		runUpsertCache[key] = cache
		runUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Run record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Run) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Run record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Run) DeleteG() error {
	if o == nil {
		return errors.New("models: no Run provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Run record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Run) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Run record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Run) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Run provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), runPrimaryKeyMapping)
	sql := "DELETE FROM `run` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from run")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q runQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q runQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("models: no runQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from run")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o RunSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o RunSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("models: no Run slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o RunSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RunSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no Run slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(runBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), runPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `run` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, runPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from run slice")
	}

	if len(runAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Run) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Run) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Run) ReloadG() error {
	if o == nil {
		return errors.New("models: no Run provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Run) Reload(exec boil.Executor) error {
	ret, err := FindRun(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RunSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *RunSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RunSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty RunSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RunSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	runs := RunSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), runPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `run`.* FROM `run` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, runPrimaryKeyColumns, len(*o))

	q := queries.Raw(exec, sql, args...)

	err := q.Bind(&runs)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in RunSlice")
	}

	*o = runs

	return nil
}

// RunExists checks if the Run row exists.
func RunExists(exec boil.Executor, id int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `run` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(sql, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if run exists")
	}

	return exists, nil
}

// RunExistsG checks if the Run row exists.
func RunExistsG(id int64) (bool, error) {
	return RunExists(boil.GetDB(), id)
}

// RunExistsGP checks if the Run row exists. Panics on error.
func RunExistsGP(id int64) bool {
	e, err := RunExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// RunExistsP checks if the Run row exists. Panics on error.
func RunExistsP(exec boil.Executor, id int64) bool {
	e, err := RunExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
